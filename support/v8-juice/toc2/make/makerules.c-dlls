#!/bin/sh
# creates some makefile code for the $(c-dlls) var
# Intended for use with toc2-c-dlls.make.

# maintenance note: the non-versioned DLL case is not currently
# handled by the makefile code, so it's effectively a no-op here.

test -z "$1" && {
    echo "usage: $0 lib1 [lib2 ...]"
    exit 1
}

cat <<!
########################################################################
# Automatically generated by $0
# $(date)
c-dlls.COMMON_DEPS = $0 \$(c-dlls.DEPSFILE) \$(c-dlls.OBJECTS)  \$(c-dlls.makefile) \$(toc2.files.makefile)
c-dlls.DO_INSTALL ?= 1
!

for t in $@; do
        sofile=$t'$(toc2.platform.file_extensions.dll)'
cat <<EOF
########################################################################
# Start rules for DLL ${t}
ifneq (,\$(${t}.DLL.VERSION))
  ${t}.DLL.VERSION.MAJOR ?= \$(word 1,\$(subst ., ,\$(${t}.DLL.VERSION)))
  ${t}.DLL.VERSION.MINOR ?= \$(word 2,\$(subst ., ,\$(${t}.DLL.VERSION)))
  ${t}.DLL.VERSION.PATCH ?= \$(word 3,\$(subst ., ,\$(${t}.DLL.VERSION)))
endif

${t}.DLL := ${sofile}
${t}.DLL.soname ?= \$(${t}.DLL.\$(${t}.DLL.VERSION.MAJOR))
package.clean_files += \$(${t}.DLL) \$(wildcard \$(${t}.DLL).*)

\$(${t}.DLL): \$(c-dlls.COMMON_DEPS) \$(${t}.DLL.OBJECTS)
	@\$(call toc2-link-c-dll,${t})
ifneq (.DLL,\$(toc2.platform.file_extensions.dll))
  ${t}.DLL: \$(${t}.DLL)
endif
${t}.DLL.DO_INSTALL ?= \$(c-dlls.DO_INSTALL)
${t}.DLL.INSTALL_DEST ?= \$(package.install.dlls.dest)

ifeq (1,\$(${t}.DLL.DO_INSTALL))
# ^^^ disable install if ${t}.DLL.DO_INSTALL is set to non-1 value
  ifneq (,\$(${t}.DLL.VERSION))
  # ^^^ this DLL has a version number, so we need special rules for de/installation
    install-so-\$(${t}.DLL):
	@\$(call toc2.call.install-dll,\$(${t}.DLL),\$(${t}.DLL.VERSION.MAJOR),\$(${t}.DLL.VERSION.MINOR),\$(${t}.DLL.VERSION.PATCH),\$(${t}.DLL.INSTALL_DEST))

    uninstall-so-\$(${t}.DLL):
	@\$(call toc2.call.uninstall,\$(${t}.DLL) \$(${t}.DLL).\$(${t}.DLL.VERSION.MAJOR) \$(${t}.DLL).\$(${t}.DLL.VERSION.MAJOR).\$(${t}.DLL.VERSION.MINOR) \$(${t}.DLL).\$(${t}.DLL.VERSION.MAJOR).\$(${t}.DLL.VERSION.MINOR).\$(${t}.DLL.VERSION.PATCH),\$(${t}.DLL.INSTALL_DEST))
  else
  # ^^^ non-versioned DLL...
    install-so-\$(${t}.DLL):
	@\$(call toc2.call.install,\$(${t}.DLL),\$(${t}.DLL.INSTALL_DEST),\$(package.install.dlls.install-flags))
    uninstall-so-\$(${t}.DLL):
	@\$(call toc2.call.uninstall,\$(${t}.DLL),\$(${t}.DLL.INSTALL_DEST))
  endif
  # ^^^ end versioned-or-non-versioned block

  install-dlls: install-so-\$(${t}.DLL)
  uninstall-dlls: uninstall-so-\$(${t}.DLL)

endif
# ^^^^ ${t}.DLL.DO_INSTALL

libs: \$(${t}.DLL)

# end rules for DLL ${t}
########################################################################
EOF
done
